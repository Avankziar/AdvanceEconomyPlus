Future ==============================================================================================================================
- PersonAktien:
  - Jeder Spieler hat x-Anzahl Aktien(Perm). Jede unverkaufte Aktie hat eine Rendite von y-%. Jede Verkaufte(n) Aktien haben ein festgelegte
    Rendite, die zum Verkauf bestanden haben.
  - Jeder Aktiewert eines Spielers wird anhand mehrere Faktoren (Spielzeit des Spielers, LogIn-Effizenz[Wielange man pro Tag on war], Geld des Spielers)
    berechnet oder statisch per Permisson (Jeden LogIn-erneuert) festgelegt.
  - Der Spieler kann eine beliebige Anzahl seiner Aktien zum Verkaufen aktiv anbieten. 
    Sollten diese Verkauft werden, so kann ein Zeitdauer festgelegt werden, um innerhalb dieser Zeit es zurückzuzahlen. 
    (mit Config maximaldauer). Sollte keine angegeben werden, so wird eine Config-Default Zeitdauer genommen.
  - Sollte die Zeitdauer überschritten werden, so werden entweder statische Strafbeträge für den Rückzahler erhoben ODER
    die Rendite erhöht sich. (Beides mit einer Config-Zeitdauer multipliziert.)
    d.h. pro Tag 500€ oder 0.05% mehr => Mehr als 1s über Zeitdatum: +500€/0.05%; mehr als 1 Tag +1000€/0.1% etc.
  - Mysql:
    - OwnStockShare: MaxGesamtAnzahl (int), Momentane Anzahl (int, auch negativ),
      Kosten pro Anteil[Für Faktoren](double), Kosten pro Anteil[Werterhöhung](double), Rendite pro anteil(float),
      
- Kredit:
  - Man sollte sein geld freiwillig in einen Kreditfond stecken können. Dann können Spieler aus dem globalen Fond sich was leihen.
    Der Maximale Leihbetrag ist per Config einstellbar. Einmal für "neue" Spieler. und der Absolute maximale Leihbetrag.
  - der eigene maximale Leihbetrag kann sich pro abgezahlten Kredit um x erhöhen.
  - Der maximale Zinssatz kann sich pro abgezahlten Krefit um x verringern bis zum absoluten minimum maximalen Leihbetrag.
  - Man kann per Config festlegen, Ob und wieviel Geld man überweisen kann, falls man einen laufenden Kredit hat.
  - Man kann per Config festlegen, ob und wiehoch man neue StandingsOrder erstellen kann
- Einstellen, dass falls Mechaniken nicht genutzt werden, die in Ingame Hilfe und TabComplet nicht angezeigt werden.
- Neue Mysql mit Tagensdaten, wieviel Geld ins und aus dem System gegangen ist. Mit Grafik oder ähnlich arbeiten.
  Dazu einen Befehl, wieviel Geld momentan im System sich befindet.
- LoadBefore Essential
- mysql struktur änderung bezüglich Orderby und DESC
  
- BungeeCord Geldunterstützung anbieten.
- Waren in der ger.yml Rechtschreibfeher beim Loggersetting drin
  => LoggerSettingsTextOnlyThroughGUI: '&cBitte den Befehl nur nutzen, wenn man durch
      die GUI aufgefordert wird!'
	 LoggerSettingsTextSuggest: '&eKlicke hier auf die Nachricht, um einen Befehlsvorschlag
      zu erhalten. Tippe dann deinen Suchtext ein und drücke &b>Enter<'
- Loggersetting spawnen nicht in englisch.
- Mysql Performance in allen Tabellen hinzufügen. Siehe scc

Build 4 =============================================================================================================================
+ Mysql:
  + Datenbank hinzugefügt für:
    + Entitys und Server
    + Spielerdaten (überarbeitete Version)
    + Accounts
    + AccountManagement
    + DefaultAccounts
    + QuickpayAccounts
+ Wenn Spieler zum ersten Mal joinen nachdem AEP installiert worden ist, werden alle Accounts jeder Währung anhand derer Dateien erstellt.
  Sollte vorher schon AEP installiert worden sein und der Spieler hatte einen alten Account gehabt, wird dieser convertiert und das Geld dem
  ersten neuen Account angerechnet.
+ Änderung aller Transaktionsbefehle von <VonSpieler> <ZuSpieler> in <VonSpielername> <VonAccountname> <Zuspielername> <ZuAccountname>
+ Alle Transaktionsbefehle sind nun asynchron.
+ ActionLog LocateDateTime in long (Unix) geändert.
+ ActionLog String kategorie hinzugefügt.
+ LoggerHandler alle Methoden mit EconomyLogger in ActionLog geändert.
+ ActionLoggerEvent und TrendLoggerEvent entfernt, da sie nun über IFH laufen.
+ LoggerSettings %uuid% is now %accountName%
+ ActionLog & TrendLog aller Methoden (Log, Grafik, Diagramm etc.) sind Teilasynchron. Bedeutet, das Gui ist synchron, die Ausgabe aller Daten asynchron.
+ StandingOrder Spieleraccounts in richtige Accounts geändert.
+ StandingOrder Eigentümer, AmountPaidToTax hinzugefügt.
+ StandingOrder Amount, optionales Argument [id] hinzugefügt.
+ StandingOrder Repeatingtime, optionales Argument [id] hinzugefügt.
+ Alle StandingOrderbefehle sind nun asynchron.
+ Alle Loanbefehl sind nun asynchron.
+ Loan Spieleraccounts in richtige Accounts geändert.
+ Loan create, nicht optionales Argument [debtorname] hinzugefügt.
+ Loan inherit, nicht optionale Argument [Accountid] hinzugefügt.
+ Loan remit wurde in Loan forgive umbenannt.
+ Loan transfer, nicht optionale Argument [Accountid] hinzugefügt.
+ PlaceHolderAPI einbinden
+ Alle Account Befehle hinzugefügt
+ /aep deleteallplayeraccounts <Spielername> hinzugefügt. Löscht alle Accounts des Spielers und den Spieler selber.
+ Wenn Spieleraccounts über dem Overdue + Löschungsdatum sind, werden sie nach dem Serverrestart gelöscht mit Consolenmeldung.
+ Wenn Do.DeleteAccountsDaysAfterOverdue in der Config kleiner 0 ist, wird die Löschung NICHT ausgeführt.
+ Um Accounts eröffnen zu können, muss wird die CountPerm aep.countaccount.<accounttype>.<anzahl> genutzt werden.
+ Zurzeit werden nur Digitale Währungen unterstützt.
+ Vault ist weiterhin unterstützt, jedoch wird dringend geraten besser IFH Economy unterstützte Plugins zu nutzen.
+ Falls AEP schon installiert war, wird beim ersten join vom Spieler alte Konten konvertiert.
+ Do.OnDeath.MoneyInWalletLostInPercent regelt, wieviel Spieler an Geld verlieren, in Prozent, auf allen Konten vom Typ Wallet.
  Wenn Wert kleiner 0, Mechanik deaktiviert.
+ Do.Bankaccount.TimeToWithdrawAccountManagementFees definiert an welchem Tag in der Woche
  (Erste Zahl vor dem Bindestrich, dabei ist 1 == Montag und 7 == Sonntag), um welche Uhrzeit die Kontoführungsgebühren
  abgezogen werden. Nur für den AccountType = Bank.
  + Do.Bankaccount.AccountManagementFeesAsLumpSum definiert, bei welcher Währung, wieviel als Pauschalbetrag von den Accounts mit der jeweiligen
    AccountKategorie abgezogen werden soll. Ist die Währung oder die AccountKategorie nicht valide wird es übersprungen sowie auch, wenn der Betrag
    kleiner als 0.0 ist.
  + Do.Bankaccount.AccountManagementFeesAsPercent definiert, bei welcher Währung, wieviel als Prozentbetrag von den Accounts mit der jeweilgen
    AccountKategorie abgezogen werden soll. Ist die Währung oder die AccountKategorie nicht valide wird es übersprungen sowie auch, wenn der 
    ProzentBetrag kleiner als 0.0 oder größer als 100.0 ist.
+ Do.Bankaccount.TimeToDepositInterest definiert an welchem Tag in der Woche
  (Erste Zahl vor dem Bindestrich, dabei ist 1 == Montag und 7 == Sonntag), um welche Uhrzeit die Zinsen auf das Konto eingezahl wird.
  Nur für den AccountType = Bank.
  + Do.Bankaccount.InterestAsPercent definiert, bei welcher Währung, wieviel als Prozentbetrag an Zinsen an die Accounts gezahlt werden soll.
    Ist die Währung oder die AccountKategorie nicht valide wird es übersprungen sowie auch, wenn der ProzentBetrag kleiner als 0.0 ist.
+ StandingOrder.DeleteAfterIsCancelledOrPausedInDays löscht beim ServerStart alle StandingOrders wo die letzte Zahl länger als x Tage ist.
  Ist der Wert kleiner 0, ist die Funktion deaktiviert.
+ IFH MessageToBungee als Consumer installiert. Ersetzt den vorherigen Bungeepart zur Nachrichtenkomunikation bei Transaktionen.
+ IFH Bungee Economy implementiert. Somit könne Plugins auf dem Bungee direkt Economy Aktion durchführen.
    
  Todo:
  - Config Value einbauen um Überweisungen auf Cooldown zu halten.
  - Permission festlegen um Währungen umzutauschen => <RestPerm>.<WährungVon>.<WährungZu>
  - Eventuell einen boolean bei den Transactionen einbauen, welches erlaubt das der Withdraw account in den Minus gehen kann.
  - LoggerSettings query ändern
  - LoggerSettings adding %account_owner_name%, %account_owner_type%
  - LoggerSettings Slot 3 => AccountID, Slot 5 => Category für die Dateien ändern
  - Tablisten für Pay befehle für alle Spieler eine listen anlegen mit deren Accountnamen.

Build 3 ============================================================================================================================
- +CommandTree eingebungen und dahingehend umgeschrieben. Bedeutet Befehle und Permission sind änderbar.
- +commands.yml nun vorhanden und innen veränderbar. Siehe CommandTree.
- +YamlManager hinzugefügt
- Sowie Json ausschaltbar machen.
- +ASCII-Art mit plugin.yml in Console sehbar.
- +Mechaniken, die abgeschaltet sind, werden ingame nicht mehr angezeigt und nicht mehr geladen.
- +/money take/give/set <playername> <amount> <CustomPlayerishReciever> <CustomOrderer> [Note], wurde mit 2 neuen Argument erweitert. Consolen fähig.
- +Kredite und Dauerauftragsmechanik hinzugefügt.
- +Beim Trendlog Farbe verbessern, so soll pro Tag der höchste wert grün sein, der andere rot. Beide gleich, dann aqua
- +GraficSpaceSymbol in config.yml zum einstellen von symbolen in Grafiken.
- +Stats befehl (Balkendiagram) einführen für alle.
  - +Beim actionlog (Only) werden alle einträge pro letzten 1 Jahre (bspw. von 10.2020 bis 10.2018) aufgelistet und die anzahl zusammengerechnet.
    Dabei wird per balken die Prozentuale Betragsanzahl vom jeweiligen Monat angegeben. Per Hover kommt die Prozente von den Beträgen pro Monat/Jahr
    sowie die Gesamteanzahl pro Monat/Jahr.
    Dahinter kommt der gesamtbetrag verrechnet, dann die maximale positive und danach die maximal negative zahlen. Eventuell in eine Gleichung
    aufgezeigt.
    Aka Zuerst die Monate (Start Monat des letzten Jahres) bis zum jetztigen Monat. Dann das letzte Jahr mit den gleichen Startpunkte.
    Die Startpunkte sind immer die ersten Tage der Monate.
    Das barchart soll von unten nach oben wie die Grafik verlaufen. 13 Einträge haben (pro Monat einen).
- +LoggerSettings Befehl mit GUI 
  - +/money loggersettings | für die gui direkt aufzurufen.
  - +/money loggersettings gui [SpielerName] [Seitenzahl] [Log, Diagram, Grafik, BarChart]
  - +/money actionlog, Shortcut für die Ausgabe des Logs, gleiches für /money trendlog
  - +Action wie Trendlog haben nun zugriff auf Filtereinstellungen, sowie auf Log, Diagramm und Grafik. Barchart ist Actionlog Only.
- +Ein Befehl um andere Settings zu sehen /money loggersettingsother <Spielername>
- +Mysql für Preset LoggerSettings insgesamt 4 Stück (Im Inventar unten links und rechts) (Linksklick ist zum Laden,
	 Rechtsklick zum Speicher (nicht überschreiben), Shiftklick zum löschen). Ist Preset nicht vorhanden, linksklick passiert nichts.
- +/money actionlog/trendlog, sind erhaltengeblieben als Shortcut zum log.

Build 2 ============================================================================================================================
- +Update auf 1.16.1
- +Unterstützung von HexColor

Base & Build 1=======================================================================================================================
- +Base Plugin Struktur eingerichtet.
- +EcoPlayer und BankAccount hinzugefügt.
- +Mysql für SpielerData, Bankdata hinzugefügt.
- +ChestShopHook
- +JobsRebornHook
- +/eco | Listet alle Economy Befehle auf | eco.cmd.eco.admin
- +/eco spieler <Spielername> | Zeigt alle Information zu einem Spieler | eco.cmd.eco.playerinfo
- /eco bank <kontoname/nummer> | Zeigt alle Infos zu dem bankkonto | eco.cmd.eco.bankinfo
- /eco toggle | Togglet ob der Spieler aller generellen Nachrichten bekommt | eco.cmd.eco.toggle
- /eco banklist | Zeigt alle Bankkontos an | eco.cmd.eco.banklist

- /eco reasonadd <Grund> <Betrag> | Erstellt einen Vordefinierten Grund mit einer Bestimmten summe | eco.cmd.eco.reasonadd
- /eco reasondelete <Grund> | Löscht einen Vordefinierten Grund | eco.cmd.eco.reasondelete
- /eco reasonlist | Zeigt alle Gründe mit vordefiniertem Betrag an | eco.cmd.eco.reasonlist

- +/eco recomment <ID> <Nachricht> | Ändert die Notiz des jeweiligen Logs. | eco.cmd.eco.recomment
- +/eco deletelog <ID> | Löscht den Log mit der jeweiligen Id. Nur für Admins | eco.cmd.eco.deletelog

- +/money | Zeigt den eigenen Geldstand an | eco.cmd.money.info
- +/money pay <Spielername> <Betrag> | Überweist Geld von einem Spieler zum anderen | eco.cmd.money.pay
- /money bankpay <kontoname/nummer> <Betrag> | Überweist Geld vom Spieler zu Bankkonto | eco.cmd.money.bankpay
- +/money give <Spielername> <Betrag> | Gibt dem Spieler als Admin Geld | eco.cmd.money.give
- +/money take <Spielername> <Betrag> | Nimmt dem Spieler als Admin Geld | eco.cmd.money.take
- +/money log [SeitenZahl] [Spielername] | Zeigt alle Geldbewegungen des Spielerkontos an. Seitenzahl beginnen bei 0 | eco.cmd.money.log
- +/money toggle | Togglet ob der Spieler Geldbewegungen angezeigt bekommt, welche sein eigenes Spielerkonto betreffen. | eco.cmd.money.toggle
- +/money top [Seitenzahl] | Zeigt die bestbetuchten Spieler an. | eco.cmd.money.top
- +/money gettotal <Spielername/Plugin> | Zeigt die gesamte Geldbetrag der durch die Transaktionen zustanden gekommen ist. | eco.cmd.money.gettotal
- /money get <UhrzeitDatum> [Uhrzeitdatum] [spieler] | Zählt alle Beträge ab und eventuell bis Zeitpunkt zusammen | eco.cmd.money.get 
- +/money freeze <Spielername> | Friert das Spielerkonto vom Spieler ein. Nun sind alle Transaktionen vom Spieler unterbunden | eco.cmd.money.freeze

- +/money filterlogbetween <Min> <Max> [Seitenzahl] [Spielername] | Filter, zwischen Min und Max, id desc | eco.cmd.money.logfilterbetween
- +/money filterlogcomment <Suchwort> [Seitenzahl] [Spielername] | Filter, Notiz Suchwort, id desc | eco.cmd.money.logfiltercomment
- +/money filterlogcommentascending <Suchwort> [Seitenzahl] [Spielername] | Filter, Notiz Suchwort, amount asc | eco.cmd.money.logfiltercommentascending
- +/money filterlogcommentdescending <Suchwort> [Seitenzahl] [Spielername] | Filter, Notiz Suchwort, amount desc | eco.cmd.money.logfiltercommentdescending
- +/money filterlogfrom <Suchwort> [Seitenzahl] [Spielername] | Filter, Von_Spielernamen Suchwort, id desc | eco.cmd.money.logfilterfrom
- +/money filterloggreaterthan <Value> [Seitenzahl] [Spielername] | Filter, größer als Value Betrag, id desc | eco.cmd.money.filterloggreaterthan
- +/money filterloglessthan <Value> [Seitenzahl] [Spielername] | Filter, kleiner als Value Betrag, id desc | eco.cmd.money.filterloglessthan
- +/money filterlogto <Suchwort> [Seitenzahl] [Spielername] | Filter, Zu_Spielernamen Suchwort, id desc | eco.cmd.money.filterlogto
- +/money filterlogorderer <Suchwort> [Seitenzahl] [Spielername] | Filter, Auftraggeber_Spielername Suchwort, id desc | eco.cmd.money.filterlogorderer
- +/money filterlogsortascending [Seitenzahl] [Spielername] | Filter, Sortiert aufsteigen nach Betrag | eco.cmd.money.filterlogsortascending
- +/money filterlogsortdescending [Seitenzahl] [Spielername] | Filter, Sortiert absteigen nach Betrag | eco.cmd.money.filterlogsortdescending

- +/money trendgrafic [Seitenzahl] [Spielername] | Zeigt eine Grafik zum Trendverlauf an. 10 Einträge pro Seite | eco.cmd.money.trendgrafic
- +/money trenddiagram [SeitenZahl] [Spielername] | Zeigt ein Diagram zum Trendverlauf an. 10 Einträge pro Seite | eco.cmd.money.trenddiagram
- +/money trendlog [Seitenzahl] [Spielername] | Zeigt ein Log vom trendverlauf. 10 Einträge pro Seite | eco.cmd.money.trendlog

- /money takereason <Spielername> <Grund> | Zieht dem Spieler den vordefinierten Betrag des grundes ab.
- /money givereason <Spielername> <Grund> | Gibt dem Spieler den vordefinierten Betrag des Grundes.

- /bank | Zeigt deine Bankkonten an | eco.cmd.bank
- /bank konto <kontoname/nummer> | Zeigt alle zugehörigen Daten zu dem Bankkonto an | eco.cmd.bank.info
- /bank pay <kontoname/nummer> <Spielername> <Betrag> [Comment] | Überweist vom Bankkonto zum Spieler. | eco.cmd.bank.pay
- /bank bankpay <VonKontoname/nummer> <ZuKontonummer/name> <Betrag> [Comment] | Überweisung von einen Bankkonto zu einem anderen | eco.cmd.bank.bankpay
- /bank create <Kontoname> | Errichtet ein neues bankkonto | eco.cmd.bank.create
- /bank invite <kontoname/nummer> <Spielername> | Lädt den Spieler als Bankkontomitglied ein | eco.cmd.bank.invite
- /bank kick <kontoname/nummer> <Spielername> | Schmeißt den Spieler aus dem Bankkonto raus. | eco.cmd.bank.kick
- /bank vice <kontoname/nummer> <Spielername> | Befördert oder degradier den Spieler zu einem Stellvertreter/Mitglied | eco.cmd.bank.vice
- /bank log <kontoname/nummer> [Seitenzahl] | Zeigt alle Geldbewegungen des Bankkontos ein. | eco.cmd.bank.log
- /bank submit <kontoname/nummer> <Spielername> | Übergibt die Inhaberrechte an den Spieler | eco.cmd.bank.submit
- /bank toggle | Togglet, ob der Spieler Geldbewegungen angezeigt bekommt, welche Bankkontos betreffen wo er mindestens mitglied ist. | eco.cmd.bank.toggle
- /bank accept | Akzeptiert eine Einladung von einem Bankkonto. | eco.cmd.bank.accept
- /bank leave <kontoname/nummer> | Verlässt das Bankkonto | eco.cmd.bank.leave
- /bank delete <kontoname/nummer> | Löscht das Bankkonto | eco.cmd.bank.delete
- /bank top [Seitenzahl] | Zeigt die bestbetuchten Bankkontos an. | eco.cmd.bank.top
- /bank take <kontoname/nummer> <Betrag> | Nimmt den Betrag von daem Bankkonto ans System. | eco.cmd.bank.take
- /bank give <kontoname/nummer> <Betrag> | Gibt den Betrag an das Bankkonto vom System. | eco.cmd.bank.give

Der Vielleicht Bereich~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- /eco info | Listet alle Steuern, Zinsen, Verwahrgeld etc auf.
- /eco steuern <OnlineProzent> <OfflineZinsen> | Stellt die Steuern ein
- /eco zinsen <Prozent> | Stellt die Zinsen ein
- /eco verwahrgeld <Betrag> | Stellt das Verwahrgeld ein
- /eco todesgeld <betrag> <AbFälligkeitsSummer> | Stellt das Todesgeld ein
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
====================================================================================================================================